---
title: "BEE 4750/5750 Homework 3"
author: "Katerina Tang (kbt28)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```
```julia; echo = false
using Printf
using JuMP
using HiGHS
using DataFrames
using Plots
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1

## Problem 1.1
Our decision variables are $x_g$, the installed capacity (MW) of generator type $g$, and $y_{g, t}$, the production (MW) from generator type $g$ in hour $t$.
In our problem, $t$ ranges from 1 to 24.

## Problem 1.2
We wish to minimize the total cost over a year, which is the sum of the investment cost, the operating cost, and the penalty for non-served demand. That is, we want to find
```math
\min_{x_g, y_{g,t}} Z = \sum_{g}C_g^{\text{inv}}x_g + 365\sum_{g}\sum_{t=1}^{24} C_g^{\text{op}} y_{g, t} + 365\left[1,000\sum_{t=1}^{24}\left(D_t-\sum_{g} y_{g,t}\right)\right],
```
where $C_g^{\text{inv}}$ is the investment cost for generator $g,$ $C_g^{\text{op}}$ is the operating cost for generator $g$, and $D_t$ is the demand (MW) in hour $t$.
The first term
```math
\sum_{g}C_g^{\text{inv}}x_g
``` 
represents the total investment cost.
The second term
```math
365\sum_{g}\sum_{t=1}^{24} C_g^{\text{op}} y_{g, t}
```
represents the operating cost.
The third term
```math
365\left[1,000\sum_{t=1}^{24}\left(D_t-\sum_{g} y_{g,t}\right)\right]
```
represents the penalty for non-served demand.
Note that we assume all 365 days in the year are equivalent in terms of hourly demand.

## Problem 1.3
Generators can't produce more than their installed capacity and availability, so we must have
```math
y_{g,t}\leq CF_{g, t}x_g
```
for all generator types $g$ and hours $t$, where $CF_{g, t}$ is the capacity factor for generator $g$ in hour $t$. 
Some generator types have a constant capacity factor, i.e., $CF_{g, 1}=\cdots=CF_{g, 24}$.

We don't want to produce more than we need to, so we should have
```math
\sum_{g} y_{g,t}\leq D_t
```
for all hours $t$.

Finally, we can't have negative installed capacity or production: for all generators $g$ and hours $t$,
```math
x_g\geq 0,\ y_{g,t}\geq 0.
```

This set of constraints is complete because it takes into account all of the information given to us in the problem.
More importantly, our constraints place bounds on our decision variables, which means that we can actually find a solution to our optimization problem.

## Problem 1.4
```julia
gencap = Model(HiGHS.Optimizer);

generators = ["Geothermal", "Coal", "CCGT", "CT", "Wind", "Solar"];
G = 1:length(generators);
T = 1:length(hours);
@variable(gencap, x[G] >= 0); # includes non-negativity constraint
@variable(gencap, y[G, T] >= 0); # includes non-negativity constraint

# objective function
@objective(gencap, Min, (investment_cost'*x) + 365*sum(op_cost .* [sum(y[g, :]) for g in G]) + 1000*365*(sum(demand)-sum(y)));

# constraint: production limited by capacity and capacity factor
avail = vcat(repeat(thermal_cf, 1, 24), wind_cf', solar_cf');
@constraint(gencap, availability[g in G, t in T], y[g, t] <= avail[g, t]*x[g]);

# constraint: production shouldn't exceed demand
@constraint(gencap, load[t in T], sum(y[:, t]) <= demand[t]);

set_silent(gencap)
optimize!(gencap)
```
## Problem 1.5
The minimum cost for one year of investment and operation is approximately `j @printf "%d" objective_value(gencap)` dollars.
The following table lists how much capacity the utility should build for each generator type:
```julia
results = DataFrame("Resource" => generators, "Installed(MW)" => value.(x).data)
```
We can calculate the non-served demand as follows:
```julia
unmet_demand = demand - [sum(value.(y).data[:, t]) for t in T];
unmet_demand == zeros(length(unmet_demand))
```
So there is no non-served demand under the optimal solution.

## Problem 1.6
The following plots show how much electricity will be generated by each type of plant over the course of a day under the optimal solution.
```julia
plot(value.(y).data', xlabel="Time (hr)", ylabel="Generated electricity (MW)", label=["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"], linewidth=2)
areaplot(value.(y).data', xlabel="Time (hr)", ylabel="Generated electricity (MW)", label=["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"], legend=:topleft, ylim=(0, 4000));
plot!(demand, linewidth=2, linecolor=:black, label="Demand")
```
When solar energy is available during the day, we primarily rely on solar generation;
this makes sense because solar generation doesn't have any operating costs.
Wind generation also doesn't have any operating costs and is used to meet a significant portion of the demand overnight, when the wind CF increases.
We do have to supplement with CCGT and CT plants as needed, e.g., when both the wind and solar CF are low or when the solar CF dips slightly at hour 13.
These are the next cheapest generation types.
Under the optimal solution, we don't install any geothermal or coal capacity;
these plants were not worth the large investment costs.

# Problem 2

## Problem 2.1
We need to add an additional constraint:
```math
365\sum_{g}\sum_{t=1}^{24} E_{g}y_{g, t}\leq 1.5\times 10^{6},
```
where $E_g$ represents the CO2 emissions (t/MWh) for each generator type.
The above constraint should make sure that the total CO2 emissions over the year is less than 1.5 Mt.
We can reformulate the above as
```math
\frac{365}{1000}\sum_{g}\sum_{t=1}^{24} E_{g}y_{g, t}\leq 1,500
```
so that using `shadow_price` later (in Question 2.5) will return the value to the utility if it were allowed to emit an additional 1000 tCO2/yr.

## Problem 2.2
```julia
@constraint(gencap, co2limit, 365*co2_emissions'*[sum(y[g, :]) for g in G]/1000 <= 1.5e3);
optimize!(gencap);
```

## Problem 2.3
The minimum cost for one year of investment and operation is approximately `j @printf "%d" objective_value(gencap)` dollars.
This is about 150 million dollars higher than the minimum cost in Problem 1.
The following table lists how much capacity the utility should build for each generator type:
```julia
results = DataFrame("Resource" => generators, "Installed(MW)" => value.(x).data)
```
We see that there is less capacity installed for the CCGT and CT generation types, which makes sense because these plants produce CO2 emissions.
Instead, we build some geothermal plants because despite the high investment cost, geothermal generation has zero CO2 emissions.

As in Problem 1, there is no non-served demand.

## Problem 2.4
The following plots show how much electricity will be generated by each type of plant over the course of the day under the optimal solution.
```julia
# plot generated electricity by generator type over one day
plot(value.(y).data', xlabel="Time (hr)", ylabel="Generated electricity (MW)", label=["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"], linewidth=2)

# stacked area plot
areaplot(value.(y).data', xlabel="Time (hr)", ylabel="Generated electricity (MW)", label=["Geothermal" "Coal" "CCGT" "CT" "Wind" "Solar"], ylim=(0,4000));
plot!(demand, linewidth=2, linecolor=:black, label="Demand")
```
The biggest change from Problem 1 is that we only rely on CCGT and CT generation when the solar and wind CF are low, i.e., early morning and late evening, and geothermal energy cannot supplement enough to meet demand.
This makes sense because CCGT and CT generation both emit CO2, while solar, wind, and geothermal generation do not.
Another big difference in this solution is that we use a balance of solar and geothermal generation throughout the middle of the day;
in Problem 1, we mostly just relied on solar generation. 
This doesn't make any difference in terms of operating costs or CO2 emissions once the necessary solar and geothermal plants are installed because both generation types have zero operating costs and zero CO2 emissions.

## Problem 2.5
Using `shadow_price`, we see that the value of being allowed to emit an additional 1000 tCO2/yr is approximately `j @printf "%d" shadow_price.(co2limit)` dollars, i.e., the minimum cost would be lowered by this much.

# References
I referenced the Generating Capacity Expansion lecture notes from 10/5/22 when writing the code for this homework.